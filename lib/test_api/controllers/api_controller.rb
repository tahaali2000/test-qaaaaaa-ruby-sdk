# test_api
#
# This file was automatically generated by APIMATIC v2.0
# ( https://apimatic.io ).

module TestApi
  # APIController
  class APIController < BaseController
    # Returns a list of users, optionally filtered by search.
    # @param [String] search Optional parameter: Filter users by search term
    # @param [Integer] limit Optional parameter: Limit the number of users
    # returned
    # @return [Array[UsersResponse]] response from the API call.
    def getusers(search: nil,
                 limit: nil)
      new_api_call_builder
        .request(new_request_builder(HttpMethodEnum::GET,
                                     '/users',
                                     Server::DEFAULT)
                   .query_param(new_parameter(search, key: 'search'))
                   .query_param(new_parameter(limit, key: 'limit'))
                   .header_param(new_parameter('application/json', key: 'accept')))
        .response(new_response_handler
                    .deserializer(APIHelper.method(:custom_type_deserializer))
                    .deserialize_into(UsersResponse.method(:from_hash))
                    .is_response_array(true))
        .execute
    end

    # Creates a user with default values if not provided.
    # @param [UsersRequest] body Required parameter: TODO: type description
    # here
    # @return [UsersResponse1] response from the API call.
    def createanewuser(body)
      new_api_call_builder
        .request(new_request_builder(HttpMethodEnum::POST,
                                     '/users',
                                     Server::DEFAULT)
                   .header_param(new_parameter('application/json', key: 'Content-Type'))
                   .body_param(new_parameter(body))
                   .header_param(new_parameter('application/json', key: 'accept'))
                   .body_serializer(proc do |param| param.to_json unless param.nil? end))
        .response(new_response_handler
                    .deserializer(APIHelper.method(:custom_type_deserializer))
                    .deserialize_into(UsersResponse1.method(:from_hash)))
        .execute
    end
  end
end
